{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Documents\\\\JS\\\\Ask-PDF\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Document, Page, pdfjs } from 'react-pdf'; // Import pdfjs from 'react-pdf'\nimport { Box, TextField, Button, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [pdfUrl, setPdfUrl] = useState('');\n  const [query, setQuery] = useState('');\n  const [chatResponse, setChatResponse] = useState('');\n  const [numPages, setNumPages] = useState(null);\n  const handleFileChange = async event => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('pdf', file);\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const documentId = response.data.sourceId;\n      setPdfUrl(`http://localhost:5000/pdf/${documentId}`);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumPages(numPages);\n  };\n  const getDocumentIdFromUrl = () => {\n    const matches = pdfUrl.match(/\\/pdf\\/([^/]+)$/);\n    return matches ? matches[1] : '';\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      p: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        width: '100%',\n        p: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '50%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Upload PDF:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), pdfUrl && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: '100%',\n            height: '80vh',\n            overflow: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(Document, {\n            file: pdfUrl,\n            onLoadSuccess: onDocumentLoadSuccess,\n            children: Array.from(new Array(numPages), (el, index) => /*#__PURE__*/_jsxDEV(Page, {\n              pageNumber: index + 1\n            }, `page_${index + 1}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gVrvsHAG9FAxZ7QsZJu1gd66efk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Document","Page","pdfjs","Box","TextField","Button","Typography","jsxDEV","_jsxDEV","App","_s","pdfUrl","setPdfUrl","query","setQuery","chatResponse","setChatResponse","numPages","setNumPages","handleFileChange","event","file","target","files","formData","FormData","append","response","post","headers","documentId","data","sourceId","error","console","onDocumentLoadSuccess","getDocumentIdFromUrl","matches","match","sx","display","flexDirection","alignItems","p","children","justifyContent","width","variant","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","height","overflow","onLoadSuccess","Array","from","el","index","pageNumber","_c","$RefreshReg$"],"sources":["C:/Users/acer/Documents/JS/Ask-PDF/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Document, Page, pdfjs } from 'react-pdf'; // Import pdfjs from 'react-pdf'\nimport { Box, TextField, Button, Typography } from '@mui/material';\n\nfunction App() {\n  const [pdfUrl, setPdfUrl] = useState('');\n  const [query, setQuery] = useState('');\n  const [chatResponse, setChatResponse] = useState('');\n  const [numPages, setNumPages] = useState(null);\n\n  const handleFileChange = async (event) => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('pdf', file);\n\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      const documentId = response.data.sourceId;\n      setPdfUrl(`http://localhost:5000/pdf/${documentId}`);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumPages(numPages);\n  };\n\n  const getDocumentIdFromUrl = () => {\n    const matches = pdfUrl.match(/\\/pdf\\/([^/]+)$/);\n    return matches ? matches[1] : '';\n  };\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', p: 2 }}>\n      <Box sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%', p: 2 }}>\n        <Box sx={{ width: '50%' }}>\n          <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n            <Typography variant=\"h6\">Upload PDF:</Typography>\n            <input type=\"file\" onChange={handleFileChange} />\n          </Box>\n          {pdfUrl && (\n            <Box sx={{ width: '100%', height: '80vh', overflow: 'auto' }}>\n              <Document file={pdfUrl} onLoadSuccess={onDocumentLoadSuccess}>\n                {Array.from(new Array(numPages), (el, index) => (\n                  <Page key={`page_${index + 1}`} pageNumber={index + 1} />\n                ))}\n              </Document>\n            </Box>\n          )}\n        </Box>\n        {/* ... (rest of the component) */}\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}